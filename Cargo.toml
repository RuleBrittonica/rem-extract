[workspace]
members = [
    "rust_analyzer/hir",
    "rust_analyzer/hir-def",
    "rust_analyzer/hir-expand",
    "rust_analyzer/hir-ty",
    "rust_analyzer/ide-db",
    "rust_analyzer/syntax",
    "rem-extract",
]
resolver = "2"

[workspace.package]
edition = "2021"
rust-version = "1.80.0"
authors = ["rust-analyzer team", "Matt Britton <matt.britton@anu.edu.au>"]
license = "MIT OR Apache-2.0"
repository = "https://github.com/RuleBrittonica/rem-extract"


[workspace.dependencies]
# Local Crates
base-db = { path = "rust_analyzer/base-db" }
cfg = { path = "rust_analyzer/cfg" }
hir = { path = "rust_analyzer/hir" }
hir-def = { path = "rust_analyzer/hir-def" }
hir-expand = { path = "rust_analyzer/hir-expand" }
hir-ty = { path = "rust_analyzer/hir-ty" }
intern = { path = "rust_analyzer/intern" }
stdx = { path = "rust_analyzer/stdx" }
syntax = { path = "rust_analyzer/syntax" }
tt = { path = "rust_analyzer/tt" }
span = { path = "rust_analyzer/span" }
salsa = { path = "./rust_analyzer/salsa" }
vfs = { path = "./rust_analyzer/vfs" }
syntax-bridge = { path = "./rust_analyzer/syntax-bridge" }
parser = { path = "./rust_analyzer/parser" }
text-edit = { path = "./rust_analyzer/text-edit" }
test-utils = { path = "./rust_analyzer/test-utils" }
limit = { path = "./rust_analyzer/limit" }
paths = { path = "./rust_analyzer/paths" }
profile = { path = "./rust_analyzer/profile" }
mbe = { path = "./rust_analyzer/mbe" }
test-fixture = { path = "./rust_analyzer/test-fixture" }
project-model = { path = "./rust_analyzer/project-model" }
toolchain = { path = "./rust_analyzer/toolchain" }
ide-db = { path = "./rust_analyzer/ide-db" }


ra-ap-rustc_lexer = { version = "0.63.0", default-features = false }
ra-ap-rustc_parse_format = { version = "0.63.0", default-features = false }
ra-ap-rustc_index = { version = "0.63.0", default-features = false }
ra-ap-rustc_abi = { version = "0.63.0", default-features = false }
ra-ap-rustc_pattern_analysis = { version = "0.63.0", default-features = false }

line-index = { version = "0.1.1" }
la-arena = { version = "0.3.1" }
lsp-server = { version = "0.7.6" }

# non-local crates
anyhow = "1.0.75"
arrayvec = "0.7.4"
bitflags = "2.4.1"
cargo_metadata = "0.18.1"
camino = "1.1.6"
chalk-solve = { version = "0.98.0", default-features = false }
chalk-ir = "0.98.0"
chalk-recursive = { version = "0.98.0", default-features = false }
chalk-derive = "0.98.0"
crossbeam-channel = "0.5.8"
dissimilar = "1.0.7"
dot = "0.1.4"
either = "1.9.0"
expect-test = "1.4.0"
hashbrown = { version = "0.14", features = [
  "inline-more",
], default-features = false }
indexmap = "2.1.0"
itertools = "0.12.0"
libc = "0.2.150"
libloading = "0.8.0"
memmap2 = "0.5.4"
nohash-hasher = "0.2.0"
oorandom = "11.1.3"
object = { version = "0.33.0", default-features = false, features = [
  "std",
  "read_core",
  "elf",
  "macho",
  "pe",
] }
process-wrap = { version = "8.0.2", features = ["std"] }
pulldown-cmark-to-cmark = "10.0.4"
pulldown-cmark = { version = "0.9.0", default-features = false }
rayon = "1.8.0"
rustc-hash = "1.1.0"
semver = "1.0.14"
serde = { version = "1.0.192", features = ["derive"] }
serde_json = "1.0.108"
smallvec = { version = "1.10.0", features = [
  "const_new",
  "union",
  "const_generics",
] }
smol_str = "0.3.1"
snap = "1.1.0"
text-size = "1.1.1"
tracing = "0.1.40"
tracing-tree = "0.3.0"
tracing-subscriber = { version = "0.3.18", default-features = false, features = [
  "registry",
  "fmt",
  "tracing-log",
] }
triomphe = { version = "0.1.10", default-features = false, features = ["std"] }
url = "2.3.1"
xshell = "0.2.5"

# We need to freeze the version of the crate, as the raw-api feature is considered unstable
dashmap = { version = "=5.5.3", features = ["raw-api"] }

[workspace.lints.rust]
# remember to update RUSTFLAGS in ci.yml if you add something here

elided_lifetimes_in_paths = "warn"
explicit_outlives_requirements = "warn"
unsafe_op_in_unsafe_fn = "warn"
unused_extern_crates = "warn"
unused_lifetimes = "warn"
unreachable_pub = "warn"

[workspace.lints.clippy]
# FIXME Remove the tidy test once the lint table is stable

## lint groups
complexity = { level = "warn", priority = -1 }
correctness = { level = "deny", priority = -1 }
perf = { level = "deny", priority = -1 }
restriction = { level = "allow", priority = -1 }
style = { level = "warn", priority = -1 }
suspicious = { level = "warn", priority = -1 }

## allow following lints
too_long_first_doc_paragraph = "allow"
# subjective
single_match = "allow"
# () makes a fine error in most cases
result_unit_err = "allow"
# We don't expose public APIs that matter like this
len_without_is_empty = "allow"
# We have macros that rely on this currently
enum_variant_names = "allow"
# Builder pattern disagrees
new_ret_no_self = "allow"
# Has a bunch of false positives
useless_asref = "allow"
# Has false positives
assigning_clones = "allow"

## Following lints should be tackled at some point
too_many_arguments = "allow"
type_complexity = "allow"
wrong_self_convention = "allow"

## warn at following lints
# CI raises these to deny
dbg_macro = "warn"
todo = "warn"
print_stdout = "warn"
print_stderr = "warn"

rc_buffer = "warn"
str_to_string = "warn"
